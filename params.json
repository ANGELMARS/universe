{"name":"Universe","tagline":"The Mesos package repository.","body":"# Mesosphere Universe [![Build Status](https://teamcity.mesosphere.io/guestAuth/app/rest/builds/buildType:(id:Oss_Universe_Ci)/statusIcon)](https://teamcity.mesosphere.io/viewType.html?buildTypeId=Oss_Universe_Ci&guest=1)\r\n\r\nThe Mesosphere Universe package repository.\r\n\r\n## Package entries\r\n\r\n### Organization\r\n\r\nPackages are encapsulated in their own directory, with one subdirectory\r\nfor each package version.\r\n\r\n```\r\n└── foo\r\n    ├── 0\r\n    │   ├── command.json\r\n    │   ├── config.json\r\n    │   ├── marathon.json\r\n    │   └── package.json\r\n    ├── 1\r\n    │   ├── command.json\r\n    │   ├── config.json\r\n    │   ├── marathon.json\r\n    │   └── package.json\r\n    └── ...\r\n\r\n```\r\n_Sample package directory layout._\r\n\r\n### Content\r\n\r\n#### `package.json`\r\n\r\n```json\r\n{\r\n  \"name\": \"foo\",\r\n  \"version\": \"1.2.3\",\r\n  \"tags\": [\"mesosphere\", \"framework\"],\r\n  \"maintainer\": \"help@bar.io\",\r\n  \"description\": \"Does baz.\",\r\n  \"scm\": \"https://github.com/bar/foo.git\",\r\n  \"website\": \"http://bar.io/foo\",\r\n  \"images\": {\r\n    \"icon-small\": \"http://some.org/foo/small.png\",\r\n    \"icon-medium\": \"http://some.org/foo/medium.png\",\r\n    \"icon-large\": \"http://some.org/foo/large.png\",\r\n    \"screenshots\": [\r\n      \"http://some.org/foo/screen-1.png\",\r\n      \"http://some.org/foo/screen-2.png\"\r\n    ]\r\n  },\r\n  \"postInstallNotes\": \"Have fun foo-ing and baz-ing!\"\r\n}\r\n```\r\n_Sample `package.json`._\r\n\r\nThe required fields are:\r\n\r\n- name\r\n- version\r\n- tags\r\n- maintainer\r\n- description\r\n\r\nWhile `images` is an optional field, it is highly recommended you include icons\r\nand screenshots in your package and update the path definitions accordingly.\r\nSpecifications are as follows:\r\n\r\n* `icon-small`: 48px (w) x 48px (h)\r\n* `icon-medium`: 96px (w) x 96px (h)\r\n* `icon-large`: 256px (w) x 256px (h)\r\n* `screenshots[...]`: 1200px (w) x 675px (h)\r\n\r\n**NOTE:** To ensure your service icons look beautiful on retina-ready displays,\r\nplease supply 2x versions of all icons. No changes are needed to\r\n`package.json` - simply supply an additional icon file with the text `@2x` in\r\nthe name before the file extension.\r\nFor example, the icon `icon-cassandra-small.png` would have a retina-ready\r\nalternate image named `icon-cassandra-small@2x.png`.\r\n\r\n#### `config.json`\r\n\r\n```json\r\n{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"foo\": {\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"baz\": {\r\n          \"type\": \"integer\",\r\n          \"description\": \"How many times to do baz.\",\r\n          \"minimum\": 0,\r\n          \"maximum\": 16,\r\n          \"required\": false,\r\n          \"default\": 4\r\n        }\r\n      },\r\n      \"required\": [\"baz\"]\r\n    }\r\n  },\r\n  \"required\": [\"foo\"]\r\n}\r\n```\r\n_Sample `config.json`._\r\n\r\n#### `marathon.json`\r\n\r\nThis file describes how to run the package as a\r\n[Marathon](http://github.com/mesosphere/marathon) app.\r\n\r\nUser-supplied metadata (as described in `config.json`) can be injected\r\nusing [moustache template](http://mustache.github.io/) syntax.\r\n\r\n```json\r\n{\r\n  \"id\": \"foo\",\r\n  \"cpus\": \"1.0\",\r\n  \"mem\": \"1024\",\r\n  \"instances\": \"1\",\r\n  \"args\": [\"{{{foo.baz}}}\"],\r\n  \"container\": {\r\n    \"type\": \"DOCKER\",\r\n    \"docker\": {\r\n      \"image\": \"bar/foo\",\r\n      \"network\": \"BRIDGE\",\r\n      \"portMappings\": [\r\n        {\r\n          \"containerPort\": 8080,\r\n          \"hostPort\": 0,\r\n          \"servicePort\": 0,\r\n          \"protocol\": \"tcp\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n_Sample `marathon.json`._\r\n\r\nSee the\r\n[Marathon API Documentation](https://mesosphere.github.io/marathon/docs/rest-api.html)\r\nfor more detailed instruction on app definitions.\r\n\r\n#### `command.json`\r\n\r\nThis file is **optional**. Describes how to install the package's CLI.\r\nCurrently the only supported format is a Pip requirements file where each\r\nelement in the array is a line in the requirements file.\r\n\r\n```json\r\n{\r\n  \"pip\": [\r\n    \"https://pypi.python.org/packages/source/f/foo/foo-1.2.3.tar.gz\"\r\n  ]\r\n}\r\n```\r\n_Sample `command.json`._\r\n\r\nSee the [Command Schema](repo/meta/schema/command-schema.json) for a detailed description of\r\nthe schema.\r\n\r\n### Versioning\r\n\r\nThe registry specification is versioned separately in the\r\nfile `/repo/meta/version.json`.\r\n\r\n```json\r\n{\r\n  \"version\": \"0.1.0-alpha\"\r\n}\r\n```\r\n_Sample `repo/meta/version.json`._\r\n\r\nThis version is updated with any change to the required file content\r\n(typically validated using JSON schema) or expected file organization in the\r\n`repo` directory.\r\n\r\n_NOTE: The current version is `0.1.0-alpha` to facilitate rapid\r\niteration.  This version will be fixed and incremented as\r\ndescribed above as programs that consume the format reach maturity._\r\n\r\n### Validation\r\n\r\nPackage content is validated using [JSON Schema](http://json-schema.org).\r\nThe schema definitions live in `/repo/meta/schema`.\r\n\r\n## Directory Structure\r\n\r\n```\r\n├── LICENSE\r\n├── README.md\r\n├── docs\r\n│   ├── best-practices.md\r\n│   └── contributing.md\r\n├── hooks\r\n│   └── pre-commit\r\n├── repo\r\n│   ├── meta\r\n│   │   ├── index.json\r\n│   │   ├── index.json.gz\r\n│   │   ├── schema\r\n│   │   │   ├── command-schema.json\r\n│   │   │   ├── config-schema.json\r\n│   │   │   ├── index-schema.json\r\n│   │   │   ├── marathon-schema.json\r\n│   │   │   └── package-schema.json\r\n│   │   └── version.json\r\n│   └── packages\r\n│       ├── B\r\n│       │   ├── bar\r\n│       │   │   ├── 0\r\n│       │   │   │   ├── command.json\r\n│       │   │   │   ├── config.json\r\n│       │   │   │   ├── marathon.json\r\n│       │   │   │   └── package.json\r\n│       │   │   └── ...\r\n│       │   └── ...\r\n│       ├── F\r\n│       │   ├── foo\r\n│       │   │   ├── 0\r\n│       │   │   │   ├── config.json\r\n│       │   │   │   ├── marathon.json\r\n│       │   │   │   └── package.json\r\n│       │   │   └── ...\r\n│       │   └── ...\r\n│       └── ...\r\n└── scripts\r\n    ├── 1-validate-packages.sh\r\n    ├── 2-build-index.sh\r\n    ├── 3-validate-index.sh\r\n    ├── 4-detect-dependency-cycles.sh\r\n    ├── build.sh\r\n    └── install-git-hooks.sh\r\n```\r\n\r\n## Sources and Transfer Protocols\r\n\r\nThis section describes transfer of package metadata from a universe\r\nsource to a client program.\r\n\r\n```\r\n ┌───────────────┐   ┌────────────────┐\r\n │public universe│   │private universe│\r\n └───────────────┘   └────────────────┘\r\n          git \\         / http\r\n               \\       /\r\n                \\     /\r\n               ┌──────┐           ┌────────┐\r\n               │client│-----------│marathon│\r\n               └──────┘    http   └────────┘\r\n                  |\r\n                  |\r\n            ┌───────────┐\r\n            │local cache│\r\n            └───────────┘\r\n```\r\n_Sample (simplified) architecture for a universe client program._\r\n\r\nPackage sources are described as URLs.\r\n\r\nSource URLs encode the transfer protocol.\r\nRecommendations for several transfer protocols follow.\r\n\r\n**Filesystem**\r\n\r\nA URL that designates a local directory.  \r\nExample: `file:///some/nfs/mount/universe`\r\n\r\n**Git**\r\n\r\nA URL that designates a git repository.  \r\nExample: `git://github.com/mesosphere/universe.git`\r\n\r\n**HTTP and HTTPS**\r\n\r\nA URL that designates a\r\n[zip](http://en.wikipedia.org/wiki/Zip_%28file_format%29) file\r\naccessible over HTTP or HTTPS with media type `application/zip`.  \r\nExample: `http://my.org/files/universe/packages.zip`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}