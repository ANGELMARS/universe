{
  "name": "Universe",
  "tagline": "The Mesosphere DCOS package repository.",
  "body": "# Mesosphere Universe\r\n\r\n| Build | Status |\r\n|---|---|\r\n|CI   | [![Build Status](https://teamcity.mesosphere.io/guestAuth/app/rest/builds/buildType:(id:Oss_Universe_Ci)/statusIcon)](https://teamcity.mesosphere.io/viewType.html?buildTypeId=Oss_Universe_Ci&guest=1)|\r\n| Universe Server | [![Build Status](https://teamcity.mesosphere.io/guestAuth/app/rest/builds/buildType:(id:Oss_Universe_UniverseServer)/statusIcon)](https://teamcity.mesosphere.io/viewType.html?buildTypeId=Oss_Universe_UniverseServer&guest=1)|\r\nMesosphere Universe registry of packages made available for DC/OS Clusters.\r\n\r\n#### Table of Contents\r\n* [Universe Purpose](#universe-purpose)\r\n* [Publish a Package](#publish-a-package-1)\r\n  * [Creating a Package](#creating-a-package)\r\n    * [`package.json`](#packagejson)\r\n      * [`.minDcosReleaseVersion`](#mindcosreleaseversion)\r\n    * [`config.json`](#configjson)\r\n    * [`marathon.json.mustache`](#marathonjsonmustache)\r\n    * [`command.json`](#commandjson)\r\n    * [`resource.json`](#resourcejson)\r\n      * [Docker Images](#docker-images)\r\n      * [Images](#images)\r\n      * [CLI Resources](#cli-resources)\r\n  * [Submit your Package](#submit-your-package)\r\n* [Repository Consumption](#repository-consumption-1)\r\n  * [Universe Server](#universe-server)\r\n    * [Build Universe Server locally](#build-universe-server-locally)\r\n    * [Run Universe Server](#run-universe-server)\r\n  * [Consumption Protocol](#consumption-protocol)\r\n  * [Supported DC/OS Versions](#supported-dcos-versions)\r\n\r\n## Universe Purpose\r\nThis git repo facilitates three necessary functions to publish, store and consume packages.\r\n\r\n### Publish a Package\r\n\r\nTo publish a package to Universe, fork this repo and open a Pull Request. A set of automated builds will be run against\r\nthe Pull Request to ensure the modifications made in the PR leave the Universe well formed.\r\nSee [Creating a Package](#creating-a-package) for details.\r\n\r\n### Registry of Packages\r\n\r\nThe registry of published packages is maintained as the contents of this repo in the `repo/packages` directory. As of\r\nrepository version `3.0` multiple packaging versions are allowed to co-exist in the same repository. Validation of\r\npackages are coordinated based on the packaging version defined in `package.json`.\r\n\r\n### Repository Consumption\r\n\r\nIn order for published packages to be consumed and installed in a DC/OS Cluster the Universe Server needs to be built\r\nand run in a location accessible by the DC/OS Cluster. See [Universe Server](#universe-server) for details on\r\nbuilding the Universe artifacts and Server.\r\n\r\n## Publish a Package\r\n\r\n### Creating a Package\r\n\r\nEach package has its own directory, with one subdirectory for each package revision. Each package revision directory\r\ncontains the set of files necessary to create a consumable package that can be used by a DC/OS Cluster to install\r\nthe package.\r\n```\r\n└── repo/package/F/foo\r\n    ├── 0\r\n    │   ├── command.json\r\n    │   ├── config.json\r\n    │   ├── marathon.json.mustache\r\n    │   ├── resource.json\r\n    │   └── package.json\r\n    ├── 1\r\n    │   ├── command.json\r\n    │   ├── config.json\r\n    │   ├── marathon.json.mustache\r\n    │   ├── resource.json\r\n    │   └── package.json\r\n    └── ...\r\n```\r\n\r\n\r\n#### `package.json`\r\n|Packaging Version|   |\r\n|-----------------|---|\r\n|2.0|required|\r\n|3.0|required|\r\n\r\nEvery package in Universe must have a `package.json` file which specifies the high level metadata about the package.\r\n\r\nCurrently, a package can specify one of two values for `.packagingVersion` either `2.0` or `3.0`; which version is declared\r\nwill dictate which other files are required for the complete package as well as the schema(s) all the files must\r\nadhere to. Below is a snippet that represents a version `2.0` package.\r\nSee [`repo/meta/schema/package-schema.json`](repo/meta/schema/package-schema.json) for the full json schema outlining\r\nwhat properties are available for each corresponding version of a package.\r\n\r\n```json\r\n{\r\n  \"packagingVersion\": \"2.0\",\r\n  \"name\": \"foo\",\r\n  \"version\": \"1.2.3\",\r\n  \"tags\": [\"mesosphere\", \"framework\"],\r\n  \"maintainer\": \"help@bar.io\",\r\n  \"description\": \"Does baz.\",\r\n  \"scm\": \"https://github.com/bar/foo.git\",\r\n  \"website\": \"http://bar.io/foo\",\r\n  \"framework\": true,\r\n  \"postInstallNotes\": \"Have fun foo-ing and baz-ing!\"\r\n}\r\n```\r\n\r\n###### `.minDcosReleaseVersion`\r\n|Packaging Version|   |\r\n|-----------------|---|\r\n|2.0|not supported|\r\n|3.0|optional|\r\n\r\nIntroduced in `packagingVersion` `3.0`, `.minDcosReleaseVersion` can be specified as a property of `package.json`.\r\nWhen `.minDcosReleaseVersion` is specified the package will only be made available to DC/OS clusters with a DC/OS\r\nRelease Version greater than or equal to (`>=`) the value specified.\r\n\r\n#### `config.json`\r\n|Packaging Version|   |\r\n|-----------------|---|\r\n|2.0|optional|\r\n|3.0|optional|\r\n\r\nThis file describes the configuration properties supported by the package, represented as a\r\n[json-schema](http://spacetelescope.github.io/understanding-json-schema/). Each property can specify whether or not it\r\nis required, a default value, as well as some basic validation.\r\n\r\nUsers can then [override specific values](https://docs.mesosphere.com/1.7/usage/services/config/) at\r\ninstallation time by passing an options file to the DC/OS CLI or by setting config values through the\r\nDC/OS UI (since DC/OS 1.7).\r\n\r\n```json\r\n{\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"foo\": {\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"baz\": {\r\n          \"type\": \"integer\",\r\n          \"description\": \"How many times to do baz.\",\r\n          \"minimum\": 0,\r\n          \"maximum\": 16,\r\n          \"required\": false,\r\n          \"default\": 4\r\n        }\r\n      },\r\n      \"required\": [\"baz\"]\r\n    }\r\n  },\r\n  \"required\": [\"foo\"]\r\n}\r\n```\r\n\r\n\r\n#### `marathon.json.mustache`\r\n|Packaging Version|   |\r\n|-----------------|---|\r\n|2.0|required|\r\n|3.0|optional|\r\n\r\nThis file is a [mustache template](http://mustache.github.io/) that when rendered will create a\r\n[Marathon](http://github.com/mesosphere/marathon) app definition capable of running your service.\r\n\r\nVariables in the mustache template will be evaluated from a union object created by merging three objects in the\r\nfollowing order:\r\n\r\n1. Defaults specified in `config.json`\r\n\r\n2. User supplied options from either the DC/OS CLI or the DC/OS UI\r\n\r\n3. The contents of `resource.json`\r\n\r\n```json\r\n{\r\n  \"id\": \"foo\",\r\n  \"cpus\": \"1.0\",\r\n  \"mem\": \"1024\",\r\n  \"instances\": \"1\",\r\n  \"args\": [\"{{{foo.baz}}}\"],\r\n  \"container\": {\r\n    \"type\": \"DOCKER\",\r\n    \"docker\": {\r\n      \"image\": \"{{resource.assets.container.docker.foo23b1cfe8e04a}}\",\r\n      \"network\": \"BRIDGE\",\r\n      \"portMappings\": [\r\n        {\r\n          \"containerPort\": 8080,\r\n          \"hostPort\": 0,\r\n          \"servicePort\": 0,\r\n          \"protocol\": \"tcp\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nSee the\r\n[Marathon API Documentation](https://mesosphere.github.io/marathon/docs/rest-api.html)\r\nfor more detailed instruction on app definitions.\r\n\r\n#### `command.json`\r\n|Packaging Version|   |\r\n|-----------------|---|\r\n|2.0|optional|\r\n|3.0|optional **[Deprecated]**|\r\n\r\nAs of `packagingVersion` `3.0`, `command.json` is deprecated in favor of the `.cli` property of `resources.json`.\r\nSee [CLI Resources](#cli-resources) for details.\r\n\r\nDescribes how to install the package's package's CLI via pip, the Python package manager. This document represents the\r\nformat of a Pip requirements file where each element in the array is a line in the requirements file.\r\n\r\n```json\r\n{\r\n  \"pip\": [\r\n    \"https://pypi.python.org/packages/source/f/foo/foo-1.2.3.tar.gz\"\r\n  ]\r\n}\r\n```\r\n\r\n#### `resource.json`\r\n|Packaging Version|   |\r\n|-----------------|---|\r\n|2.0|optional|\r\n|3.0|optional|\r\n\r\nThis file contains all of the externally hosted resources (E.g. Docker images, HTTP objects and\r\nimages) needed to install the application.\r\n\r\n```json\r\n{\r\n  \"images\": {\r\n    \"icon-small\": \"http://some.org/foo/small.png\",\r\n    \"icon-medium\": \"http://some.org/foo/medium.png\",\r\n    \"icon-large\": \"http://some.org/foo/large.png\",\r\n    \"screenshots\": [\r\n      \"http://some.org/foo/screen-1.png\",\r\n      \"http://some.org/foo/screen-2.png\"\r\n    ]\r\n  },\r\n  \"assets\": {\r\n    \"uris\": {\r\n      \"log4j-properties\": \"http://some.org/foo/log4j.properties\"\r\n    },\r\n    \"container\": {\r\n      \"docker\": {\r\n        \"23b1cfe8e04a\": \"some-org/foo:1.0.0\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n##### Docker Images\r\n\r\nFor the Docker image, please use the image ID for the referenced image. You can find this by\r\npulling the image locally and running `docker images some-org/foo:1.0.0`.\r\n\r\n##### Images\r\n\r\nWhile `images` is an optional field, it is highly recommended you include icons and screenshots\r\nin `resource.json` and update the path definitions accordingly. Specifications are as follows:\r\n\r\n* `icon-small`: 48px (w) x 48px (h)\r\n* `icon-medium`: 96px (w) x 96px (h)\r\n* `icon-large`: 256px (w) x 256px (h)\r\n* `screenshots[...]`: 1200px (w) x 675px (h)\r\n\r\n**NOTE:** To ensure your service icons look beautiful on retina-ready displays,\r\nplease supply 2x versions of all icons. No changes are needed to\r\n`resource.json` - simply supply an additional icon file with the text `@2x` in\r\nthe name before the file extension.\r\nFor example, the icon `icon-cassandra-small.png` would have a retina-ready\r\nalternate image named `icon-cassandra-small@2x.png`.\r\n\r\n##### CLI Resources\r\n|Packaging Version|   |\r\n|-----------------|---|\r\n|2.0|not supported|\r\n|3.0|optional|\r\n\r\nThe new `.cli` property allows for a package to configure native CLI subcommands for several platforms and\r\narchitectures.\r\n\r\n```json\r\n{\r\n  \"cli\":{\r\n    \"binaries\":{\r\n      \"darwin\":{\r\n        \"x86-64\":{\r\n          \"contentHash\":[\r\n            { \"algo\": \"sha256\", \"value\": \"...\" }\r\n          ],\r\n          \"kind\": \"executable\",\r\n          \"url\":\"https://some.org/foo/1.0.0/cli/darwin/dcos-foo\"\r\n        }\r\n      },\r\n      \"linux\":{\r\n        \"x86-64\":{\r\n          \"contentHash\":[\r\n            { \"algo\":\"sha256\", \"value\":\"...\" }\r\n          ],\r\n          \"kind\":\"executable\",\r\n          \"url\":\"https://some.org/foo/1.0.0/cli/linux/dcos-foo\"\r\n        }\r\n      },\r\n      \"windows\":{\r\n        \"x86-64\":{\r\n          \"contentHash\":[\r\n            { \"algo\":\"sha256\", \"value\":\"...\" }\r\n          ],\r\n          \"kind\":\"executable\",\r\n          \"url\":\"https://some.org/foo/1.0.0/cli/windows/dcos-foo\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Submit your Package\r\n\r\nDevelopers are invited to publish a package containing their DC/OS Service by submitting a Pull Request targeted at\r\nthe `version-3.x` branch of this repo.\r\n\r\nFull Instructions:\r\n\r\n1. Fork this repo and clone the fork:\r\n\r\n  ```bash\r\n  git clone https://github.com/<user>/universe.git /path/to/universe\r\n  ```\r\n\r\n2. Ensure that the `jsonschema` command line tool is installed:\r\n\r\n  ```bash\r\n  sudo pip install jsonschema\r\n  ```\r\n\r\n3. Run the verification and build script:\r\n\r\n  ```bash\r\n  scripts/build.sh\r\n  ```\r\n\r\n4. Verify all build steps completed successfully\r\n5. Submit a pull request against the `version-3.x` branch with your changes. Every pull request opened will have a set\r\n   of automated verifications run against it. These automated verification are reported against the pull request using\r\n   the GitHub status API. All verifications must pass in order for a pull request to be eligible for merge.\r\n\r\n6. Respond to manual review feedback provided by the DC/OS Community.\r\n  * Each Pull Request to Universe will also be manually reviewed by a member of the DC/OS Community. To ensure your\r\n    package is able to be made available to users as quickly as possible be sure to respond to the feedback provided.\r\n\r\n\r\n## Repository Consumption\r\n\r\nIn order for Universe to be consumed by DC/OS the build process needs to be run to create the Universe Server.\r\n\r\n### Universe Server\r\n\r\nUniverse Server is a new component introduce alongside `packagingVersion` `3.0`. In order for Universe to be able to\r\nprovide packages for many versions of DC/OS at the same time, it is necessary for a server to be responsible for serving\r\nthe correct set of packages to a cluster based on the cluster's version.\r\n\r\nAll Pull Requests opened for Universe and the `version-3.x` branch will have their Docker image built and published\r\nto the DockerHub image [`mesosphere/universe-server`](https://hub.docker.com/r/mesosphere/universe-server/).\r\nIn the artifacts tab of the build results you can find `docker/server/marathon.json` which can be used to run the\r\nUniverse Server for testing in your DC/OS cluster.  For each Pull Request, click the details link of the \"Universe Server\r\nDocker image\" status report to view the build results.\r\n\r\n#### Build Universe Server locally\r\n\r\n1. Validate and build the Universe artifacts\r\n  ```bash\r\n  scripts/build.sh\r\n  ```\r\n\r\n2. Build the Universe Server Docker image\r\n  ```bash\r\n  DOCKER_TAG=\"my-package\" docker/server/build.bash\r\n  ```\r\n  This will create a Docker image `universe-server:my-package` and `docker/server/target/marathon.json` on your local machine\r\n\r\n3. If you would like to publish the built Docker image, run\r\n  ```bash\r\n  DOCKER_TAG=\"my-package\" docker/server/build.bash publish\r\n  ```\r\n\r\n#### Run Universe Server\r\n\r\nUsing the `marathon.json` that is created when building Universe Server we can run a Universe Server in our DC/OS\r\nCluster which can then be used to install packages.\r\n\r\nRun the following commands to configure DC/OS to use the custom Universe Server\r\n```bash\r\ndcos marathon app add marathon.json\r\ndcos package repo add --index=0 dev-universe http://universe.marathon.mesos:8085/repo\r\n```\r\n\r\n\r\n### Consumption Protocol\r\n\r\nA DC/OS Cluster can be configured to point to multiple Universe Servers; each Universe Server will be fetched via\r\nHTTPS or HTTP. When a DC/OS Cluster attempts to fetch the package set from a Universe Server, the Universe Server\r\nwill provide ONLY those packages which can be run on the cluster.\r\n\r\nFor example:\r\nA DC/OS 1.6.1 Cluster will only receive packages with a `minDcosReleaseVersion` less than or equal to (`<=`) `1.6.1`\r\nin the format the DC/OS Cluster expects.\r\n\r\n```\r\n +----------------------+   +-----------------------+\r\n │public universe server│   │private universe server│\r\n +----------------------+   +-----------------------+\r\n                http \\         / http\r\n                      \\       /\r\n                       \\     /\r\n                       +-----+           +--------+\r\n                       │DC/OS│-----------│Marathon│\r\n                       +-----+    http   +--------+\r\n```\r\n\r\n### Supported DC/OS Versions\r\nCurrently Universe Server provides support for the following versions of DC/OS\r\n\r\n| DC/OS Release Version | Support Level |\r\n|-----------------------|---------------|\r\n| 1.6.1                 | Full Support  |\r\n| 1.7                   | Full Support  |\r\n| 1.8                   | Full Support  |\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}